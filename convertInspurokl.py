# -><- coding: utf-8 -*-
# 23/07/2022


import os
import argparse
from parse_component_log import get_component_info
from util import _read_json, logger_cof, get_file_list, init_logger, write_log, stop_logger
from parse_analy_report import deal_report
from parse_regrawdata import deal_regrawdata

# Entry point for converting Onekeylog to ACD format
# @parameter - args_input： The ErrorAnalyReport file from Onekeylog package
# @parameter - args_path： The path for all the Onekeylog files
# @parameter - args_cpu： Indicate the cpu type(icx, cpx) of the input file
# return - error_list: All error messages generated by the parse_log() function.
def convert(args_input, args_path, args_cpu):
    init_logger()
    write_log("------start------")
    error_list = []
    prefix_system_name_list = []
    if args_input:
        report_filename = args_input
        error_list = parse_logs(report_filename, args_cpu)
    elif args_path:
        # parent is the current directory, dirnames is all subdirectly under the current directory,
        # filenames is all files in the current directory.
        for parent, dirnames, filenames in os.walk(args_path):
            for filename in filenames:
                flag = False
                if filename.endswith("ErrorAnalyReport.json"):
                    prefix_system_name = filename.replace("ErrorAnalyReport.json", "")
                    flag = True
                elif filename.endswith("RegRawData.json"):
                    prefix_system_name = filename.replace("RegRawData.json", "")
                    flag = True
                if flag:
                    prefix_system_name_list.append((prefix_system_name, parent))

        prefix_system_name_list = list(set(prefix_system_name_list))

        for system, parent in prefix_system_name_list:
            report_filename = os.path.join(parent,system+"ErrorAnalyReport.json")
            error_list.extend(parse_logs(report_filename, args_cpu))
                    
    write_log("convert error count: " + str(len(error_list)))
    print("convert error count: ", len(error_list))
    if error_list:
        print(error_list)
    write_log("------end------")
    stop_logger()
    return error_list

# To parse all the logs, component.log、ErrorAnalyReport.json RegRawData.json files and so on,
# generate the corresponding ACD files.
# @parameter - report_filename： The ErrorAnalyReport file
# @parameter - args_cpu： Indicate the cpu type(icx, cpx) of the input file
# return - error_list: All error messages generated by the _read_json() and get_component_info()
def parse_logs(report_filename, args_cpu):
    conf_json, error_list = _read_json("configuration.py")
    rawdata_filename = report_filename.replace("ErrorAnalyReport.json", "RegRawData.json")
    log_filename = report_filename.replace("ErrorAnalyReport.json", "component.log")
    log_cputype_re = conf_json["log_cputype_re"]
    raw_cputype_re = conf_json["raw_cputype_re"]
    #logger = logger_cof("onekeylog.log")
    news = ("##### Start to convert "+report_filename)
    write_log(news)
    print("##### Start to convert ", report_filename)
    all_list = []
    try:
        component_info, error_list1 = get_component_info(log_filename, rawdata_filename, log_cputype_re, raw_cputype_re, args_cpu)
    except Exception as e:
        error_list.append((os.path.basename(report_filename), e.args[0]))
        return error_list
    all_list, error_list2 = deal_report(report_filename, component_info)
    error_list3 = deal_regrawdata(rawdata_filename, component_info, all_list)
    error_list = error_list + error_list1 + error_list2 + error_list3
    return error_list


if __name__ == "__main__":
#    logger = logger_cof("onekeylog.log")
#    logger.debug("-----------------------------------------------------start create a new log !-----------------------------------------------------")

    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--input", help="The single RegAnalyReport.json.")
    parser.add_argument("-p", "--path", help="The path for RegAnalyReport.json files, it will analyze all files in the path.")
    parser.add_argument("-c", "--cpu", help="Indicate the cpu type(icx, cpx) of the input file")
    args = parser.parse_args()
    if not args.input and not args.path:
        raise SystemExit("Need argument -i [file] or -p [path]")
    
    convert(args.input, args.path, args.cpu)
